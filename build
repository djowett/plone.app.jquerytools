#!/usr/bin/env python

import os
import shlex
import shutil
import urllib2
import tarfile
import tempfile
import StringIO
import subprocess
import datetime



def run_hooks(name, hooks, kw):
    if name in hooks.keys():
        for hook in hooks[name]:
            kw = hooks(**kw)
    return kw

def build(name, download_url, hooks=dict(), **kw):

    # create temporary directory
    TMP_DIR = tempfile.mkdtemp(prefix='build--'+name + VERSION)

    # download the archive
    archive = urllib2.urlopen(DOWNLOAD_URL).fp.read()
    f = StringIO.StringIO()
    f.write(archive)
    f.seek(0)

    # extract it to temporary folder 
    archive_tar = tarfile.open(fileobj=f)
    for member in archive_tar.getmembers():
        if member.path.startswith('/') or \
           member.path.startswith('..'):
            raise Exception('Somebody want to harm your coputer.')
    archive_tar.extractall(TMP_DIR)
    f.close()

    try:

        # defaults
        out = os.listdir(TMP_DIR)
        if len(out) != 1:
            raise Exception('There should only be one folder')

        kw['source_dir_name'] = out[0]
        kw['source_dir'] = os.path.join(TMP_DIR, source_dir_name)
        kw['build_dir'] = os.path.join(TMP_DIR, source_dir_name+'-build')
        kw['download_url'] = download_url
        kw['tmp_dir'] = TMP_DIR
        kw['name'] = name

        # before hooks
        kw = run_hooks('before', hooks, kw)

        for dirpath, dirnames, filenames in os.walk(build_dir):
            for filename in filenames:
                kw['filename'] = os.path.join(dirpath, filename)
                kw['short_filename'] = filename[len(build_dir) + 1:]

                print '-' * 80
                print 'FILE: ' + kw['short_filename']

                # per_file hooks
                kw = run_hooks('per_file', hooks, kw)

        # after hooks
        kw = run_hooks('file', hooks, kw)

    finally:

        # remove temporary directory
        shutil.rmtree(TMP_DIR)


def main():
    """
        master plan:
         * pull version from http://github.com/jquerytools/jquerytools/tarball/v${VERSION}
         * untar and make usual build it like ant is doing it (look build.xml)
         * merge files like its is done in README.txt and copy it to plone/app/jquerytools/browser folder
    """

    # TODO: we could make get values bellow bia sys.args (argparse)

    JQ_TOOLS_VERSION = 'v1.2.5'
    JQ_TOOLS_DOWNLOAD_URL = 'http://github.com/jquerytools/jquerytools/tarball/'+JQ_TOOLS_VERSION
    JQ_TOOLS_DOWNLOAD_URL = 'file:///Users/rok/Projects/garbas/jquerytools-jquerytools-v1.2.5-0-g85655d7.tar.gz'

    JQ_FORM_VERSION = 'master'
    JQ_FORM_URL= 'http://github.com/malsup/form/tarball/'+JQ_FORM_VERSION

    PLONE_MAPPING = {
        'jquery.tools.min.js': [
                'jquery.tools:overlay/overlay.js',
                'jquery.tools:scrollable/scrollable.js',
                'jquery.tools:tabs/tabs.js',
                'jquery.tools:toolbox/toolbox.history.js',
                'jquery.tools:toolbox/toolbox.expose.js'
                'jquery.tools:tooltip/tooltip.js',
            ],
        'jquery.tools.plugins.min.js': [
                'jquery.tools:tabs/tabs.slideshow.js',
                'jquery.tools:overlay/overlay.apple.js',
                'jquery.tools:scrollable/scrollable.autoscroll.js',
                'jquery.tools:scrollable/scrollable.navigator.js',
                'jquery.tools:tabs/tabs.slideshow.js',
                'jquery.tools:toolbox/toolbox.flashembed.js',
                'jquery.tools:toolbox/toolbox.mousewheel.js',
                'jquery.tools:tooltip/tooltip.dynamic.js',
                'jquery.tools:tooltip/tooltip.slide.js',
            ],
        'jquery.tools.dateinput.min.js': [
                'jquery.tools:dateinput/dateinput.js',
            ],
        'jquery.tools.rangeinput.min.js': [
                'jquery.tools:rangeinput/rangeinput.js',
            ],
        'jquery.tools.validator.min.js': [
                'jquery.tools:validator/validator.js',
            ],
        'jquery.form.min.js': [
                'jquery.form:jquery.form.js',
                ]
    }

    #
    # run build for all libs

    build('jquery.tools', JQ_TOOLS_DOWNLOAD_URL,
          version=JQ_FORM_VERSION,
          plone_mapping=PLONE_MAPPING,
          today=datetime.datetime.today().strftime("%Y-%m-%d %H:%M"),
          jslint=os.path.join(os.path.abspath(os.path.dirname(__file__)), 'lib', 'jslint.js'),
          rhino=os.path.join(os.path.abspath(os.path.dirname(__file__)), 'lib', 'rhino.jar'),
          hooks = {'before': [
                        jq_tools_before_hook,
                        plone_before_hook],
                   'per_file': [
                        version_hook,
                        date_hook,
                        lint_hook,
                        minify_hook,
                        plone_file_hook],
                  })
    build('jquery.form', JQ_FORM_URL, plone_app_jquerytools,
          version=JQ_FORM_URL, plone_mapping=PLONE_MAPPING,
          hooks = {'before': [plone_before_hook],
                   'per_file': [minify_hook],
                  })


def jq_tools_before_hook(**kw):
    shutil.copytree(
            os.path.join(kw['source_dir'], 'src'),
            kw['build_dir'])

    # FIXME: this should actually copy all *.js files from lib directory
    shutil.copy2(
            os.path.join(kw['source_dir'], 'lib', 'jslint.js'),
            os.path.join(kw['build_dir'], 'jslint.js'))


    return kw

def plone_before_hook(**kw):
    plone_dir = os.path.join(
                    os.path.abspath(
                    os.path.dirname(__file__)),
                        'plone', 'app', 'jquerytools')
    kw['plone_dir']= plone_dir

    for script in kw['plone_mapping']:
        script_path = os.path.join(plone_dir, script)
        if os.path.exists(script_path):
            f = open(script_path, 'w+')
            f.write('')
            f.close()

    return kw

def version_hook(**kw):
    args = shlex.split('sed -i "" "s/@VERSION/%(version)s/g" %(filename)s' % kw)
    subprocess.check_call(args)
    return kw

def date_hook(**kw):
    # FIXME: should be date from git log
    args = shlex.split('sed -i "" "s/@DATE/%(today)s/g" %(filename)s' % kw)
    subprocess.check_call(args)
    return kw

def lint_hook(**kw):
    # lint (http://www.jslint.com/lint.html)
    output = subprocess.Popen(
            shlex.split('java -jar %(rhino)s %(jslint)s %(filename)s ' % kw),
            stdout=subprocess.PIPE).communicate()
    if output[0].startswith('jslint: No problems found in'):
        print '  |-> jslint status: OK'
    else:
        print '  |-> jslint status: ERROR'
        print '\n'.join([(' '*6)+i for i in output[0].split('\n')])
    return kw

def minify_hook(**kw):
    # minify with Closure Compiler (default mode)
    subprocess.check_call(
        shlex.split('java -jar %(compiler)s '
                    '--js %(filename)s '
                    '--js_output_file %(output_file)s' % \
                    dict(filename=filename,
                         compiler=os.path.join(source_dir, 'lib', 'compiler.jar'),
                         output_file=filename[:-3] + '.min.js'
                        )))
    print '  |-> minified to: ' + short_filename[:-3] + '.min.js'
    return kw

def plone_file_hook(**kw):
    for script in kw['plone_mapping']:
        if kw['short_filename'] in kw['plone_mapping'][script]:
            source_filename = os.path.join(kw['build_dir'], kw['short_filename'][:-3] + '.min.js')
            build_filename = os.path.join(kw['plone_dir'], script)

            g = open(source_filename)
            content = g.read()+'\n'
            g.close()

            f = open(build_filename, 'a+')
            f.write(content)
            f.close()

            print '  |-> plone: ' + build_filename[len(kw['plone_dir']) + 1:]


if __name__ == '__main__':
    main()
